-- Services
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local module = {}
local assets = {
    DiscordInvitePrompt = loadstring(game:HttpGet("https://github.com/RegularVynixu/Utilities/raw/main/Discord%20Inviter/Assets/DiscordInvitePrompt.rbxm"))(),
    NotificationSound = "rbxassetid://INSERT_SOUND_ID" -- Replace with appropriate sound asset ID
}

-- Helper Functions
local function loadCustomAsset(url)
    -- Implement your logic to load custom assets here (e.g., using AssetService)
    return url -- Placeholder; adjust as needed
end

local function request(options)
    local response = HttpService:RequestAsync(options)
    return response
end

local function getInviteCode(sInvite)
    return sInvite:match("/([%w%-]+)$") or sInvite
end

local function getInviteData(sInvite)
    local code = getInviteCode(sInvite)
    local url = "https://discord.com/api/invites/" .. code
    local success, result = pcall(function()
        return HttpService:JSONDecode(request({ Url = url, Method = "GET" }).Body)
    end)

    if not success then
        warn("Failed to get invite data:\n" .. result)
        return nil
    end

    return result
end

local function getInitials(name)
    local initials = ""
    for word in name:gmatch("%S+") do
        initials = initials .. word:sub(1, 1)
    end
    return initials:sub(1, 3)
end

local function make(class, properties)
    local object = Instance.new(class)
    for key, value in pairs(properties) do
        object[key] = value
    end
    return object
end

local function toggleShowPrompt(promptGui, isVisible)
    local frame = promptGui.Holder
    local serverIcon = frame.ServerIcon
    local serverInitials = serverIcon.ServerInitials
    local invited = frame.Invited
    local serverName = frame.ServerName
    local accept = frame.Accept
    local ignore = frame.Ignore

    if isVisible then
        frame.Visible = true
        TweenService:Create(frame, TweenInfo.new(1, Enum.EasingStyle.Quint), { Size = UDim2.new(0.175, 0, 0.175, 0) }):Play()
        TweenService:Create(frame.UICorner, TweenInfo.new(1, Enum.EasingStyle.Quint), { CornerRadius = UDim.new(0, 8) }):Play()
        task.wait(1)
        TweenService:Create(serverIcon, TweenInfo.new(1, Enum.EasingStyle.Quint), { BackgroundTransparency = 0, ImageTransparency = 0 }):Play()
        TweenService:Create(serverInitials, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 0 }):Play()
        task.wait(0.1)
        TweenService:Create(invited, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 0 }):Play()
        task.wait(0.1)
        TweenService:Create(serverName, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 0 }):Play()
        task.wait(0.1)
        TweenService:Create(accept, TweenInfo.new(1, Enum.EasingStyle.Quint), { BackgroundTransparency = 0, TextTransparency = 0 }):Play()
        task.wait(0.1)
        TweenService:Create(ignore, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 0 }):Play()
        task.wait(1)
    else
        TweenService:Create(ignore, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 1 }):Play()
        task.wait(0.1)
        TweenService:Create(accept, TweenInfo.new(1, Enum.EasingStyle.Quint), { BackgroundTransparency = 1, TextTransparency = 1 }):Play()
        task.wait(0.1)
        TweenService:Create(serverName, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 1 }):Play()
        task.wait(0.1)
        TweenService:Create(invited, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 1 }):Play()
        task.wait(0.1)
        TweenService:Create(serverIcon, TweenInfo.new(1, Enum.EasingStyle.Quint), { BackgroundTransparency = 1, ImageTransparency = 1 }):Play()
        TweenService:Create(serverInitials, TweenInfo.new(1, Enum.EasingStyle.Quint), { TextTransparency = 1 }):Play()
        task.wait(1)
        TweenService:Create(frame, TweenInfo.new(1, Enum.EasingStyle.Quint), { Size = UDim2.new() }):Play()
        TweenService:Create(frame.UICorner, TweenInfo.new(1, Enum.EasingStyle.Quint), { CornerRadius = UDim.new(1, 0) }):Play()
        task.wait(1)
        frame.Visible = false
    end
end

-- Module Functions
module.Prompt = function(inviteTable)
    assert(type(inviteTable) == "table", "<table> Invalid invite table")
    assert(type(inviteTable.name) == "string", "<string> Invalid invite name")
    assert(type(inviteTable.invite) == "string", "<string> Invalid invite code")
    
    local invite = inviteTable.invite
    local inviteData = getInviteData(invite)
    
    if inviteData then
        local promptGui = assets.DiscordInvitePrompt:Clone()
        local holder = promptGui.Holder
        local serverIcon = holder.ServerIcon
        local serverInitials = serverIcon.ServerInitials
        local invited = holder.Invited
        local serverName = holder.ServerName
        local accept = holder.Accept
        local ignore = holder.Ignore
        
        holder.Size = UDim2.new()
        holder.UICorner.CornerRadius = UDim.new(1, 0)
        serverName.Text = inviteTable.name
        accept.Text = "Join <b>" .. inviteTable.name .. "</b>"
        
        if inviteData.guild and inviteData.guild.icon then
            serverIcon.Image = loadCustomAsset("https://cdn.discordapp.com/icons/" .. inviteData.guild.id .. "/" .. inviteData.guild.icon .. ".png")
        else
            serverInitials.Text = getInitials(inviteTable.name)
            serverInitials.Visible = true
        end
        
        for _, c in holder:GetDescendants() do
            if c:IsA("TextLabel") or c:IsA("TextButton") then
                c.BackgroundTransparency = 1
                c.TextTransparency = 1
            elseif c:IsA("ImageLabel") then
                c.ImageTransparency = 1
            end
        end

        -- Display the prompt
        promptGui.Parent = CoreGui
        toggleShowPrompt(promptGui, true)

        -- Event connections for user interaction
        local connections = {}
        local function dismiss(join)
            for _, c in connections do
                c:Disconnect()
            end
            if join then
                module.Join(invite)
            end
            toggleShowPrompt(promptGui, false)
        end

        connections.acceptActivated = accept.Activated:Connect(function()
            dismiss(true)
        end)
        
        connections.ignoreActivated = ignore.Activated:Connect(function()
            dismiss(false)
        end)

        accept.MouseEnter:Connect(function()
            TweenService:Create(accept, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(71, 82, 196) }):Play()
        end)
        accept.MouseLeave:Connect(function()
            TweenService:Create(accept, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(88, 101, 242) }):Play()
        end)

        ignore.MouseEnter:Connect(function()
            ignore.Text = "<u>" .. ignore.Text .. "</u>"
        end)
        ignore.MouseLeave:Connect(function()
            ignore.Text = ignore.Text:gsub("<u>", ""):gsub("</u>", "")
        end)
    end
end

module.Join = function(sInvite)
    assert(type(sInvite) == "string", "<string> Invalid invite provided")
    
    local inviteData = getInviteData(sInvite)
    if inviteData then
        request({
            Url = "http://127.0.0.1:6463/rpc?v=1",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["Origin"] = "https://discord.com"
            },
            Body = HttpService:JSONEncode({
                cmd = "INVITE_BROWSER",
                args = {
                    code = inviteData.code
                },
                nonce = HttpService:GenerateGUID(false)
            })
        })
        
        -- Play notification sound
        local sound = Instance.new("Sound")
        sound.Volume = 1
        sound.SoundId = assets.NotificationSound
        sound.PlayOnRemove = true
        sound.Parent = CoreGui
        sound:Destroy()
    end
end

-- Main
return module
